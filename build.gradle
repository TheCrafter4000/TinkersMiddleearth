buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name "ProfMobius Maven FS"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
}

apply plugin: 'forge'
apply plugin: 'idea'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = config.version
group = config.group
//noinspection GroovyUnusedAssignment
archivesBaseName = config.archivesBaseName

println "Current mod version is " + project.version

// Need this here so eclipse task generates correctly.
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"

    replaceIn 'src/main/java/com/thecrafter4000/lotrtc/TinkersMiddleearth.java'
    replace '@version@', config.version
    replace '@modid@', config.modid
    replace '@mcversion@', project.minecraft.version
    replace '@name@', config.name
}

idea { module{ inheritOutputDirs = true } }

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compile "mantle:Mantle:1.7.10-0.3.2.jenkins191:deobf"
    compile "tconstruct:TConstruct:1.7.10-1.8.8.build991:deobf"
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'com.thecrafter4000.lotrtc.asm.TinkersMECoremod'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        filter ReplaceTokens, tokens: [version: config.version, mcversion: project.minecraft.version, modid: config.modid, name: config.name]
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}