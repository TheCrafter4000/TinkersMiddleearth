buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name "ProfMobius Maven FS"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
}

apply plugin: 'forge'

version = "unknown"
group= "com.thecrafter4000.lotrtc"
archivesBaseName = "[1.7.10] Tinker's Middleearth"

sourceCompatibility = 1.8
targetCompatibility = 1.8

//Makes sure I don't have to edit both build.gradle and main mod file. I think there is a better way tho.
File file = file("src/main/java/com/thecrafter4000/lotrtc/TinkersMiddleearth.java") // Finds main modfile
file.readLines().each{ // Iterates over the whole file
    if (it.contains("public static final String VERSION = ")) { // looks for the VERSION field
        project.version = it.substring(39, it.length()-2) // Overwrites the version string
    }
}

println "Read mod version: " + project.version + "!"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
}

idea { module{ inheritOutputDirs = true } }

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compile "mantle:Mantle:1.7.10-0.3.2.jenkins191:deobf"
    compile "tconstruct:TConstruct:1.7.10-1.8.8.build991:deobf"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
